// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: metalstack/io/accounting/api/v1/ip.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IPService_Added_FullMethodName    = "/metalstack.io.accounting.api.v1.IPService/Added"
	IPService_Modified_FullMethodName = "/metalstack.io.accounting.api.v1.IPService/Modified"
	IPService_Deleted_FullMethodName  = "/metalstack.io.accounting.api.v1.IPService/Deleted"
	IPService_Usage_FullMethodName    = "/metalstack.io.accounting.api.v1.IPService/Usage"
)

// IPServiceClient is the client API for IPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPServiceClient interface {
	Added(ctx context.Context, in *IPReport, opts ...grpc.CallOption) (*Empty, error)
	Modified(ctx context.Context, in *IPReport, opts ...grpc.CallOption) (*Empty, error)
	Deleted(ctx context.Context, in *IPReport, opts ...grpc.CallOption) (*Empty, error)
	Usage(ctx context.Context, in *IPUsageRequest, opts ...grpc.CallOption) (*IPUsageResponse, error)
}

type iPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPServiceClient(cc grpc.ClientConnInterface) IPServiceClient {
	return &iPServiceClient{cc}
}

func (c *iPServiceClient) Added(ctx context.Context, in *IPReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, IPService_Added_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceClient) Modified(ctx context.Context, in *IPReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, IPService_Modified_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceClient) Deleted(ctx context.Context, in *IPReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, IPService_Deleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceClient) Usage(ctx context.Context, in *IPUsageRequest, opts ...grpc.CallOption) (*IPUsageResponse, error) {
	out := new(IPUsageResponse)
	err := c.cc.Invoke(ctx, IPService_Usage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPServiceServer is the server API for IPService service.
// All implementations should embed UnimplementedIPServiceServer
// for forward compatibility
type IPServiceServer interface {
	Added(context.Context, *IPReport) (*Empty, error)
	Modified(context.Context, *IPReport) (*Empty, error)
	Deleted(context.Context, *IPReport) (*Empty, error)
	Usage(context.Context, *IPUsageRequest) (*IPUsageResponse, error)
}

// UnimplementedIPServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIPServiceServer struct {
}

func (UnimplementedIPServiceServer) Added(context.Context, *IPReport) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Added not implemented")
}
func (UnimplementedIPServiceServer) Modified(context.Context, *IPReport) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modified not implemented")
}
func (UnimplementedIPServiceServer) Deleted(context.Context, *IPReport) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deleted not implemented")
}
func (UnimplementedIPServiceServer) Usage(context.Context, *IPUsageRequest) (*IPUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Usage not implemented")
}

// UnsafeIPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPServiceServer will
// result in compilation errors.
type UnsafeIPServiceServer interface {
	mustEmbedUnimplementedIPServiceServer()
}

func RegisterIPServiceServer(s grpc.ServiceRegistrar, srv IPServiceServer) {
	s.RegisterService(&IPService_ServiceDesc, srv)
}

func _IPService_Added_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).Added(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPService_Added_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).Added(ctx, req.(*IPReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPService_Modified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).Modified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPService_Modified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).Modified(ctx, req.(*IPReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPService_Deleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).Deleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPService_Deleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).Deleted(ctx, req.(*IPReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPService_Usage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).Usage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPService_Usage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).Usage(ctx, req.(*IPUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPService_ServiceDesc is the grpc.ServiceDesc for IPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metalstack.io.accounting.api.v1.IPService",
	HandlerType: (*IPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Added",
			Handler:    _IPService_Added_Handler,
		},
		{
			MethodName: "Modified",
			Handler:    _IPService_Modified_Handler,
		},
		{
			MethodName: "Deleted",
			Handler:    _IPService_Deleted_Handler,
		},
		{
			MethodName: "Usage",
			Handler:    _IPService_Usage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metalstack/io/accounting/api/v1/ip.proto",
}
