// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: metalstack/io/accounting/api/v1/network_traffic.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkTrafficService_Modified_FullMethodName = "/metalstack.io.accounting.api.v1.NetworkTrafficService/Modified"
	NetworkTrafficService_Usage_FullMethodName    = "/metalstack.io.accounting.api.v1.NetworkTrafficService/Usage"
)

// NetworkTrafficServiceClient is the client API for NetworkTrafficService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkTrafficServiceClient interface {
	Modified(ctx context.Context, in *NetworkTrafficReport, opts ...grpc.CallOption) (*Empty, error)
	Usage(ctx context.Context, in *NetworkUsageRequest, opts ...grpc.CallOption) (*NetworkUsageResponse, error)
}

type networkTrafficServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkTrafficServiceClient(cc grpc.ClientConnInterface) NetworkTrafficServiceClient {
	return &networkTrafficServiceClient{cc}
}

func (c *networkTrafficServiceClient) Modified(ctx context.Context, in *NetworkTrafficReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NetworkTrafficService_Modified_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkTrafficServiceClient) Usage(ctx context.Context, in *NetworkUsageRequest, opts ...grpc.CallOption) (*NetworkUsageResponse, error) {
	out := new(NetworkUsageResponse)
	err := c.cc.Invoke(ctx, NetworkTrafficService_Usage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkTrafficServiceServer is the server API for NetworkTrafficService service.
// All implementations should embed UnimplementedNetworkTrafficServiceServer
// for forward compatibility
type NetworkTrafficServiceServer interface {
	Modified(context.Context, *NetworkTrafficReport) (*Empty, error)
	Usage(context.Context, *NetworkUsageRequest) (*NetworkUsageResponse, error)
}

// UnimplementedNetworkTrafficServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNetworkTrafficServiceServer struct {
}

func (UnimplementedNetworkTrafficServiceServer) Modified(context.Context, *NetworkTrafficReport) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modified not implemented")
}
func (UnimplementedNetworkTrafficServiceServer) Usage(context.Context, *NetworkUsageRequest) (*NetworkUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Usage not implemented")
}

// UnsafeNetworkTrafficServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkTrafficServiceServer will
// result in compilation errors.
type UnsafeNetworkTrafficServiceServer interface {
	mustEmbedUnimplementedNetworkTrafficServiceServer()
}

func RegisterNetworkTrafficServiceServer(s grpc.ServiceRegistrar, srv NetworkTrafficServiceServer) {
	s.RegisterService(&NetworkTrafficService_ServiceDesc, srv)
}

func _NetworkTrafficService_Modified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkTrafficReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkTrafficServiceServer).Modified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkTrafficService_Modified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkTrafficServiceServer).Modified(ctx, req.(*NetworkTrafficReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkTrafficService_Usage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkTrafficServiceServer).Usage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkTrafficService_Usage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkTrafficServiceServer).Usage(ctx, req.(*NetworkUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkTrafficService_ServiceDesc is the grpc.ServiceDesc for NetworkTrafficService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkTrafficService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metalstack.io.accounting.api.v1.NetworkTrafficService",
	HandlerType: (*NetworkTrafficServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Modified",
			Handler:    _NetworkTrafficService_Modified_Handler,
		},
		{
			MethodName: "Usage",
			Handler:    _NetworkTrafficService_Usage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metalstack/io/accounting/api/v1/network_traffic.proto",
}
