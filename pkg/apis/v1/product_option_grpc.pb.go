// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: metalstack/io/accounting/api/v1/product_option.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductOptionService_Modified_FullMethodName = "/metalstack.io.accounting.api.v1.ProductOptionService/Modified"
	ProductOptionService_Usage_FullMethodName    = "/metalstack.io.accounting.api.v1.ProductOptionService/Usage"
)

// ProductOptionServiceClient is the client API for ProductOptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductOptionServiceClient interface {
	Modified(ctx context.Context, in *ProductOptionReport, opts ...grpc.CallOption) (*Empty, error)
	Usage(ctx context.Context, in *ProductOptionUsageRequest, opts ...grpc.CallOption) (*ProductOptionUsageResponse, error)
}

type productOptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductOptionServiceClient(cc grpc.ClientConnInterface) ProductOptionServiceClient {
	return &productOptionServiceClient{cc}
}

func (c *productOptionServiceClient) Modified(ctx context.Context, in *ProductOptionReport, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductOptionService_Modified_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOptionServiceClient) Usage(ctx context.Context, in *ProductOptionUsageRequest, opts ...grpc.CallOption) (*ProductOptionUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductOptionUsageResponse)
	err := c.cc.Invoke(ctx, ProductOptionService_Usage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductOptionServiceServer is the server API for ProductOptionService service.
// All implementations should embed UnimplementedProductOptionServiceServer
// for forward compatibility.
type ProductOptionServiceServer interface {
	Modified(context.Context, *ProductOptionReport) (*Empty, error)
	Usage(context.Context, *ProductOptionUsageRequest) (*ProductOptionUsageResponse, error)
}

// UnimplementedProductOptionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductOptionServiceServer struct{}

func (UnimplementedProductOptionServiceServer) Modified(context.Context, *ProductOptionReport) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modified not implemented")
}
func (UnimplementedProductOptionServiceServer) Usage(context.Context, *ProductOptionUsageRequest) (*ProductOptionUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Usage not implemented")
}
func (UnimplementedProductOptionServiceServer) testEmbeddedByValue() {}

// UnsafeProductOptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductOptionServiceServer will
// result in compilation errors.
type UnsafeProductOptionServiceServer interface {
	mustEmbedUnimplementedProductOptionServiceServer()
}

func RegisterProductOptionServiceServer(s grpc.ServiceRegistrar, srv ProductOptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductOptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductOptionService_ServiceDesc, srv)
}

func _ProductOptionService_Modified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOptionReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOptionServiceServer).Modified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOptionService_Modified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOptionServiceServer).Modified(ctx, req.(*ProductOptionReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOptionService_Usage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOptionUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOptionServiceServer).Usage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOptionService_Usage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOptionServiceServer).Usage(ctx, req.(*ProductOptionUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductOptionService_ServiceDesc is the grpc.ServiceDesc for ProductOptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductOptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metalstack.io.accounting.api.v1.ProductOptionService",
	HandlerType: (*ProductOptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Modified",
			Handler:    _ProductOptionService_Modified_Handler,
		},
		{
			MethodName: "Usage",
			Handler:    _ProductOptionService_Usage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metalstack/io/accounting/api/v1/product_option.proto",
}
