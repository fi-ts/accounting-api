// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/fi-ts/accounting-go/pkg/apis/v1"
	mock "github.com/stretchr/testify/mock"
)

// PostgresServiceServer is an autogenerated mock type for the PostgresServiceServer type
type PostgresServiceServer struct {
	mock.Mock
}

// Added provides a mock function with given fields: _a0, _a1
func (_m *PostgresServiceServer) Added(_a0 context.Context, _a1 *v1.PostgresReport) (*v1.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PostgresReport) (*v1.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PostgresReport) *v1.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.PostgresReport) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deleted provides a mock function with given fields: _a0, _a1
func (_m *PostgresServiceServer) Deleted(_a0 context.Context, _a1 *v1.PostgresReport) (*v1.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PostgresReport) (*v1.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PostgresReport) *v1.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.PostgresReport) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Modified provides a mock function with given fields: _a0, _a1
func (_m *PostgresServiceServer) Modified(_a0 context.Context, _a1 *v1.PostgresReport) (*v1.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PostgresReport) (*v1.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PostgresReport) *v1.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.PostgresReport) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usage provides a mock function with given fields: _a0, _a1
func (_m *PostgresServiceServer) Usage(_a0 context.Context, _a1 *v1.PostgresUsageRequest) (*v1.PostgresUsageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.PostgresUsageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PostgresUsageRequest) (*v1.PostgresUsageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PostgresUsageRequest) *v1.PostgresUsageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PostgresUsageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.PostgresUsageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostgresServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostgresServiceServer creates a new instance of PostgresServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostgresServiceServer(t mockConstructorTestingTNewPostgresServiceServer) *PostgresServiceServer {
	mock := &PostgresServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
